
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Send, Paperclip, CheckCircle, Loader2 } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  isSuccess?: boolean;
}

interface ChatInterfaceProps {
  onGenerateCode: (message: string, files?: FileList) => Promise<void>;
  isGenerating: boolean;
}

const ChatInterface = ({ onGenerateCode, isGenerating }: ChatInterfaceProps) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hi! I'm your AI assistant. Describe what you want to build and I'll create it for you instantly with professional images and modern fonts!",
      sender: 'ai',
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputText;
    setInputText('');

    try {
      await onGenerateCode(currentInput);
      
      // Add success message
      const successMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: `App Created Successfully!\nGenerated by: Enhanced Fallback\nQuality Level: Enhanced (65/100)\nType: Business Website\nIndustry: Healthcare`,
        sender: 'ai',
        timestamp: new Date(),
        isSuccess: true
      };
      setMessages(prev => [...prev, successMessage]);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div className="flex flex-col h-full">
      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[85%] rounded-lg p-3 ${
              message.sender === 'user' 
                ? 'bg-purple-600 text-white' 
                : message.isSuccess
                ? 'bg-green-50 border border-green-200'
                : 'bg-gray-100 text-gray-900'
            }`}>
              {message.isSuccess && (
                <div className="flex items-center mb-2">
                  <CheckCircle className="w-4 h-4 text-green-500 mr-2" />
                  <span className="text-green-700 font-medium text-sm">App Created Successfully!</span>
                </div>
              )}
              <p className={`text-sm whitespace-pre-line ${message.isSuccess ? 'text-gray-700' : ''}`}>
                {message.text}
              </p>
            </div>
          </div>
        ))}
        
        {isGenerating && (
          <div className="flex justify-start">
            <div className="bg-gray-100 rounded-lg p-3 flex items-center">
              <Loader2 className="w-4 h-4 animate-spin text-purple-600 mr-2" />
              <span className="text-sm text-gray-700">Creating your app...</span>
            </div>
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="border-t border-gray-200 bg-white p-4">
        <div className="mb-4">
          <div className="bg-purple-600 text-white rounded-lg p-4 text-center">
            <h3 className="font-semibold mb-2">Hybrid AI Builder</h3>
            <p className="text-sm opacity-90 mb-3">
              Describe what you want to build and I'll intelligently create it using our hybrid system - 10% Local LLM first for speed, 90% Groq for consistent high quality.
            </p>
            <div className="text-xs space-y-1">
              <div>• "Create a calculator"</div>
              <div>• "Build a todo app"</div>
              <div>• "Make a business website for my startup"</div>
              <div>• "Timer application"</div>
            </div>
          </div>
        </div>
        
        <div className="space-y-3">
          <Textarea
            placeholder="Describe what you want to build (calculator, website, todo app, etc.)..."
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            className="resize-none border-gray-300 focus:border-purple-500 focus:ring-purple-500"
            rows={3}
          />
          
          <div className="flex items-center justify-between">
            <Button
              variant="outline"
              size="sm"
              className="text-gray-600 border-gray-300"
            >
              <Paperclip className="w-4 h-4" />
            </Button>
            
            <Button
              onClick={handleSendMessage}
              disabled={!inputText.trim() || isGenerating}
              className="bg-purple-600 hover:bg-purple-700 text-white"
            >
              {isGenerating ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </div>
          
          <p className="text-xs text-gray-500 text-center">
            Press Shift+Enter for new line • Hybrid AI: 10% Local first, 90% Groq
          </p>
        </div>
      </div>
    </div>
  );
};

export default ChatInterface;
